#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3506
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleBlog.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="blogdb")]
	public partial class BlogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public BlogDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["blogdbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BlogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.Articles")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _title;
		
		private string _slug;
		
		private string _body;
		
		private System.Nullable<System.DateTime> _updated_on;
		
		private System.Nullable<System.DateTime> _created_on;
		
		private int _author_id;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnslugChanging(string value);
    partial void OnslugChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void Onupdated_onChanging(System.Nullable<System.DateTime> value);
    partial void Onupdated_onChanged();
    partial void Oncreated_onChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_onChanged();
    partial void Onauthor_idChanging(int value);
    partial void Onauthor_idChanged();
    #endregion
		
		public Article()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_slug", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string slug
		{
			get
			{
				return this._slug;
			}
			set
			{
				if ((this._slug != value))
				{
					this.OnslugChanging(value);
					this.SendPropertyChanging();
					this._slug = value;
					this.SendPropertyChanged("slug");
					this.OnslugChanged();
				}
			}
		}
		
		[Column(Storage="_body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Column(Storage="_updated_on", DbType="DateTime")]
		public System.Nullable<System.DateTime> updated_on
		{
			get
			{
				return this._updated_on;
			}
			set
			{
				if ((this._updated_on != value))
				{
					this.Onupdated_onChanging(value);
					this.SendPropertyChanging();
					this._updated_on = value;
					this.SendPropertyChanged("updated_on");
					this.Onupdated_onChanged();
				}
			}
		}
		
		[Column(Storage="_created_on", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_on
		{
			get
			{
				return this._created_on;
			}
			set
			{
				if ((this._created_on != value))
				{
					this.Oncreated_onChanging(value);
					this.SendPropertyChanging();
					this._created_on = value;
					this.SendPropertyChanged("created_on");
					this.Oncreated_onChanged();
				}
			}
		}
		
		[Column(Storage="_author_id", DbType="Int NOT NULL")]
		public int author_id
		{
			get
			{
				return this._author_id;
			}
			set
			{
				if ((this._author_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onauthor_idChanging(value);
					this.SendPropertyChanging();
					this._author_id = value;
					this.SendPropertyChanged("author_id");
					this.Onauthor_idChanged();
				}
			}
		}
		
		[Association(Name="Article_Comment", Storage="_Comments", ThisKey="id", OtherKey="article_id")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="User_Article", Storage="_User", ThisKey="author_id", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._author_id = value.id;
					}
					else
					{
						this._author_id = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[Table(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _article_id;
		
		private string _author_name;
		
		private string _author_email;
		
		private string _author_url;
		
		private System.Nullable<System.DateTime> _updated_on;
		
		private System.DateTime _created_on;
		
		private System.Nullable<bool> _approved;
		
		private string _body;
		
		private EntityRef<Article> _Article;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onarticle_idChanging(int value);
    partial void Onarticle_idChanged();
    partial void Onauthor_nameChanging(string value);
    partial void Onauthor_nameChanged();
    partial void Onauthor_emailChanging(string value);
    partial void Onauthor_emailChanged();
    partial void Onauthor_urlChanging(string value);
    partial void Onauthor_urlChanged();
    partial void Onupdated_onChanging(System.Nullable<System.DateTime> value);
    partial void Onupdated_onChanged();
    partial void Oncreated_onChanging(System.DateTime value);
    partial void Oncreated_onChanged();
    partial void OnapprovedChanging(System.Nullable<bool> value);
    partial void OnapprovedChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    #endregion
		
		public Comment()
		{
			this._Article = default(EntityRef<Article>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_article_id", DbType="Int NOT NULL")]
		public int article_id
		{
			get
			{
				return this._article_id;
			}
			set
			{
				if ((this._article_id != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onarticle_idChanging(value);
					this.SendPropertyChanging();
					this._article_id = value;
					this.SendPropertyChanged("article_id");
					this.Onarticle_idChanged();
				}
			}
		}
		
		[Column(Storage="_author_name", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string author_name
		{
			get
			{
				return this._author_name;
			}
			set
			{
				if ((this._author_name != value))
				{
					this.Onauthor_nameChanging(value);
					this.SendPropertyChanging();
					this._author_name = value;
					this.SendPropertyChanged("author_name");
					this.Onauthor_nameChanged();
				}
			}
		}
		
		[Column(Storage="_author_email", DbType="NVarChar(1024)")]
		public string author_email
		{
			get
			{
				return this._author_email;
			}
			set
			{
				if ((this._author_email != value))
				{
					this.Onauthor_emailChanging(value);
					this.SendPropertyChanging();
					this._author_email = value;
					this.SendPropertyChanged("author_email");
					this.Onauthor_emailChanged();
				}
			}
		}
		
		[Column(Storage="_author_url", DbType="NVarChar(1024)")]
		public string author_url
		{
			get
			{
				return this._author_url;
			}
			set
			{
				if ((this._author_url != value))
				{
					this.Onauthor_urlChanging(value);
					this.SendPropertyChanging();
					this._author_url = value;
					this.SendPropertyChanged("author_url");
					this.Onauthor_urlChanged();
				}
			}
		}
		
		[Column(Storage="_updated_on", DbType="DateTime")]
		public System.Nullable<System.DateTime> updated_on
		{
			get
			{
				return this._updated_on;
			}
			set
			{
				if ((this._updated_on != value))
				{
					this.Onupdated_onChanging(value);
					this.SendPropertyChanging();
					this._updated_on = value;
					this.SendPropertyChanged("updated_on");
					this.Onupdated_onChanged();
				}
			}
		}
		
		[Column(Storage="_created_on", DbType="DateTime NOT NULL")]
		public System.DateTime created_on
		{
			get
			{
				return this._created_on;
			}
			set
			{
				if ((this._created_on != value))
				{
					this.Oncreated_onChanging(value);
					this.SendPropertyChanging();
					this._created_on = value;
					this.SendPropertyChanged("created_on");
					this.Oncreated_onChanged();
				}
			}
		}
		
		[Column(Storage="_approved", DbType="Bit")]
		public System.Nullable<bool> approved
		{
			get
			{
				return this._approved;
			}
			set
			{
				if ((this._approved != value))
				{
					this.OnapprovedChanging(value);
					this.SendPropertyChanging();
					this._approved = value;
					this.SendPropertyChanged("approved");
					this.OnapprovedChanged();
				}
			}
		}
		
		[Column(Storage="_body", CanBeNull=false)]
		public string body
		{
			get
			{
				return this._body;
			}
			set
			{
				if ((this._body != value))
				{
					this.OnbodyChanging(value);
					this.SendPropertyChanging();
					this._body = value;
					this.SendPropertyChanged("body");
					this.OnbodyChanged();
				}
			}
		}
		
		[Association(Name="Article_Comment", Storage="_Article", ThisKey="article_id", OtherKey="id", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._article_id = value.id;
					}
					else
					{
						this._article_id = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _pass;
		
		private EntitySet<Article> _Articles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    #endregion
		
		public User()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_pass", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[Association(Name="User_Article", Storage="_Articles", ThisKey="id", OtherKey="author_id")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
